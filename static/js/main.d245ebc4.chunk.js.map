{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","nameId","uuid","numberId","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","contact","props","addNewContact","resetForm","this","className","s","form","onSubmit","label","htmlFor","id","onChange","input","type","placeholder","pattern","title","required","Button","variant","Component","ContactList","contacts","onDeleteContact","list","map","item","text","onClick","Filter","filter","App","initialContacts","obj","el","includes","alert","prevState","changeFilter","deleteContact","contactId","normalizedFilter","toLowerCase","normalizedContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d245ebc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"text\":\"ContactList_text__2dM24\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1E5tH\",\"input\":\"Filter_input__2DoVp\"};","import s from \"./ContactForm.module.css\";\nimport { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport class ContactForm extends Component {\n  nameId = uuid();\n  numberId = uuid();\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const contact = { name, number };\n    this.setState({ contact });\n    this.props.addNewContact(contact);\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ ...this.state });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { nameId, numberId, handleSubmit, handleChange } = this;\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          onChange={handleChange}\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label className={s.label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          onChange={handleChange}\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n        <Button\n          type=\"submit\"\n          variant=\"secondary\"\n          //   className={s.btn}\n        >\n          Add contacts\n        </Button>\n      </form>\n    );\n  }\n}\n","import s from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.list}>\n    {contacts.map((contact) => (\n      <li key={contact.id} className={s.item}>\n        <p className={s.text}>{contact.name + \" : \" + contact.number}</p>\n        <Button\n          variant=\"outline-secondary\"\n          // className={s.btn}\n          onClick={() => onDeleteContact(contact.id)}\n        >\n          Delete\n        </Button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import { v4 as uuid } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nconst nameId = uuid();\n\nexport const Filter = ({ value, onChange }) => (\n  <label htmlFor={nameId} className={s.filter}>\n    Find contact by name\n    <input\n      id={nameId}\n      onChange={onChange}\n      className={s.input}\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      placeholder=\"Enter contact name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport initialContacts from \"./components/dataBase/contacts.json\";\nimport { ContactForm } from \"./components/ContactForm/ContactForm\";\nimport { ContactList } from \"./components/ContactList/ContactList\";\nimport { Filter } from \"./components/Filter/Filter\";\n\nexport default class App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: \"\",\n  };\n  addNewContact = (obj) => {\n    const { contacts } = this.state;\n    const nameId = uuid();\n    const sameName = contacts.map((el) => el.name).includes(obj.name);\n\n    if (sameName) {\n      alert(`${obj.name} is already in contacts!`);\n    } else {\n      this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, { ...obj, id: nameId }],\n        };\n      });\n    }\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  render() {\n    // console.log(this.state);\n    const { contacts, filter } = this.state;\n\n    const { addNewContact, changeFilter, deleteContact } = this;\n\n    const normalizedFilter = filter.toLowerCase();\n    const normalizedContact = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Phonebook</h1>\n        <ContactForm addNewContact={addNewContact} />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList\n          contacts={normalizedContact}\n          onDeleteContact={deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"input\":\"ContactForm_input__gm87B\"};"],"sourceRoot":""}